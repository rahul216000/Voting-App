<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Voting Admin Panel</title>
    <link rel="stylesheet" href="/style.css">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        :root {
            --primary: #5898b7;
            --secondary: #9dceda;
            --background: #ececdf;
            --accent: #cbdea4;
            --dark-text: #2c3e50;
            --white: #ffffff;
            --radius: 16px;
            --shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }

        body {
            background-color: var(--background);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            color: var(--dark-text);
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        h1 {
            margin: 30px 0 20px;
            color: var(--primary);
        }

        form {
            background-color: var(--white);
            padding: 30px;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            width: 90%;
            max-width: 550px;
        }

        label {
            display: block;
            margin-top: 15px;
            font-weight: bold;
        }

        input[type="text"],
        select {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--secondary);
            border-radius: var(--radius);
            margin-top: 5px;
            font-size: 1rem;
        }

        button {
            margin-top: 30px;
            width: 100%;
            padding: 14px;
            background: linear-gradient(to right, var(--primary), var(--secondary));
            color: var(--white);
            font-size: 1.1rem;
            font-weight: bold;
            border: none;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            cursor: pointer;
            transition: all 0.3s ease;
        }

        button:hover {
            background: var(--accent);
            color: var(--dark-text);
            transform: scale(1.02);
        }

        .image-card {
            background: var(--white);
            border: 1px solid var(--secondary);
            border-radius: var(--radius);
            padding: 15px;
            text-align: center;
            box-shadow: var(--shadow);
            margin-top: 15px;
        }

        .image-card img {
            max-width: 180px;
            max-height: 140px;
            display: block;
            margin: 0 auto 10px;
            border-radius: var(--radius);
            object-fit: contain;
            box-shadow: var(--shadow);
        }

        .image-card input[type="file"] {
            display: none;
        }

        .custom-file-btn {
            display: inline-block;
            background-color: var(--primary);
            color: white;
            padding: 8px 16px;
            border-radius: var(--radius);
            cursor: pointer;
            font-weight: bold;
        }

        .remove-btn {
            margin-top: 10px;
            background-color: var(--accent);
            border: none;
            color: var(--dark-text);
            padding: 6px 14px;
            border-radius: var(--radius);
            cursor: pointer;
            font-weight: bold;
            transition: background 0.3s;
        }

        .remove-btn:hover {
            background-color: #f66;
            color: white;
        }

        .option-block {
            border-top: 2px solid var(--secondary);
            padding-top: 15px;
            margin-top: 20px;
        }

        @media (max-width: 600px) {
            form {
                width: 85%;
                padding: 20px;
            }
        }
    </style>
</head>

<body>
    <h1>Voting Admin Panel</h1>

    <form id="votingForm" action="/admin-voting/update" method="POST" enctype="multipart/form-data">
        <input type="hidden" name="id" value="<%= latest?._id %>">

        <label>Voting Question</label>
        <input type="text" name="question" required value="<%= latest?.question || '' %>">

        <div class="image-card">
            <img id="previewQuestionImage" src="<%= latest?.questionImage ? '/uploads/' + latest.questionImage : '' %>"
                style="<%= latest?.questionImage ? '' : 'display:none;' %>">
            <button type="button" class="remove-btn" id="removeQuestionImageBtn"
                
                onclick="removeImage('previewQuestionImage', 'removeQuestionImage')">Remove Image</button>
            <input type="hidden" name="removeQuestionImage" id="removeQuestionImage" value="false">

            <label class="custom-file-btn">
                Choose Image for Question
                <input type="file" name="questionImage" accept="image/*"
                    onchange="previewImage(this, 'previewQuestionImage')">
            </label>
        </div>

        <label>Question Image Link (Optional)</label>
        <input type="text" name="questionImageLink" value="<%= latest?.questionImageLink || '' %>">

        <div id="optionsContainer"></div>
        <button type="button" onclick="addOption()">Add Option</button>

        <label>Magic Coins</label>
        <input type="text" name="token" value="<%= latest?.token || '' %>">

        <button type="submit">Update</button>
    </form>

<script>
  const existingOptions = <%- JSON.stringify(latest?.options || []) %>;
</script>

    <script>
        let optionCount = 0;

        function previewImage(input, previewId) {
            const file = input.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const img = document.getElementById(previewId);
                    img.src = e.target.result;
                    img.style.display = "block";
                };
                reader.readAsDataURL(file);
            }
        }

        function removeImage(imgId, hiddenInputId) {
            const img = document.getElementById(imgId);
            const hiddenInput = document.getElementById(hiddenInputId);
            if (img) img.style.display = "none";
            if (hiddenInput) hiddenInput.value = "true";

            // Also hide the remove button if it's for the question image
            if (imgId === "previewQuestionImage") {
                const btn = document.getElementById("removeQuestionImageBtn");
                if (btn) btn.style.display = "none";
            }
        }


        function removeOption(index) {
            const block = document.getElementById("option-block-" + index);
            if (block) block.remove();
            updateOptionLabels();
        }

        function updateOptionLabels() {
            const container = document.getElementById("optionsContainer");
            const blocks = Array.from(container.querySelectorAll(".option-block"));
            blocks.forEach((block, newIndex) => {
                const letter = String.fromCharCode(65 + newIndex);
                block.dataset.index = newIndex;
                block.id = `option-block-${newIndex}`;

                const label = block.querySelector("label");
                const textInput = block.querySelector("input[type='text']");
                const fileInput = block.querySelector("input[type='file']");
                const img = block.querySelector("img");
                const hiddenInput = block.querySelector("input[type='hidden']");
                const removeBtn = block.querySelector("button.remove-btn");

                if (label) label.textContent = `Option ${letter} Text`;
                if (textInput) textInput.name = `optionText${newIndex}`;

                if (img) img.id = `previewOptionImage${newIndex}`;

                if (fileInput) {
                    fileInput.name = `optionImage${newIndex}`;
                    fileInput.setAttribute("onchange", `previewImage(this, 'previewOptionImage${newIndex}')`);
                }

                if (hiddenInput) {
                    hiddenInput.name = `removeOptionImage${newIndex}`;
                    hiddenInput.id = `removeOptionImage${newIndex}`;
                }

                if (removeBtn) {
                    removeBtn.setAttribute("onclick", `removeOption(${newIndex})`);
                }
            });

            optionCount = blocks.length;
        }

        function addOption(opt = {}) {
            const i = optionCount;
            const letter = String.fromCharCode(65 + i);
            const container = document.createElement("div");
            container.className = "option-block";
            container.id = `option-block-${i}`;
            container.dataset.index = i;

            const hasImage = opt.image ? true : false;
            const imgSrc = hasImage ? `/uploads/${opt.image}` : '';
            const imgDisplay = hasImage ? '' : 'display:none';

            container.innerHTML = `
        <label>Option ${letter} Text</label>
        <input type="text" name="optionText${i}" value="${opt.text || ''}">
        <div class="image-card">
          <img id="previewOptionImage${i}" src="${imgSrc}" style="${imgDisplay}">
          <input type="hidden" name="removeOptionImage${i}" id="removeOptionImage${i}" value="false">
          <button type="button" class="remove-btn" onclick="removeImage('previewOptionImage${i}', 'removeOptionImage${i}')">Remove Image</button>
          <label class="custom-file-btn">
            Choose Image for Option ${letter}
            <input type="file" name="optionImage${i}" accept="image/*" onchange="previewImage(this, 'previewOptionImage${i}')">
          </label>
        </div>
        <button type="button" class="remove-btn" onclick="removeOption(${i})">Remove Option</button>
      `;

            document.getElementById("optionsContainer").appendChild(container);
            optionCount++;
            updateOptionLabels();
        }

        window.addEventListener("DOMContentLoaded", () => {
            existingOptions.forEach(opt => addOption(opt));
        });
    </script>
</body>

</html>